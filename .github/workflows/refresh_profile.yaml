name: Refresh GitHub Profile
run-name: Refresh GitHub Profile run by ${{ github.actor }} on ${{ github.ref_name }}

on:
  workflow_dispatch:
    inputs:
      output-dir:
        description: 'Path to the output directory'
        required: true
        default: 'tf/all-repositories/'
      debug:
        description: 'Enable debug output'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  environment: ci
  refresh-profile:
    name: Refresh GitHub Profile
    runs-on: ubuntu-latest
    
    # Prevent overlapping runs of THIS workflow on the same branch
    concurrency:
      group: refresh-profile-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Execute Python script (process_repositories.py)
        env:
          GITHUB_TOKEN: ${{ secrets.GH_GIST_TOKEN }}
        working-directory: ${{ github.workspace }}
        run: |
            python python-scripts/process_repositories.py \
            --org "${{ github.repository_owner }}" \
            --output-dir "${{ inputs.output-dir }}" \
            ${{ inputs.debug && '--debug' || '' }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-role-arn }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: output-files
          path: ${{ github.workspace }}/${{ inputs.output-dir }}

      - name: Terraform Validation and Formatting Checks
        id: validate
        uses: subhamay-bhattacharyya-gha/tf-validate-action@main
        with:
          terraform-dir: "tf"
          s3-bucket: ${{ vars.TF_STATE_BUCKET_NAME }}
          s3-region: ${{ vars.AWS_REGION }}

      # - name: Run TFLint
      #   uses: subhamay-bhattacharyya-gha/tf-lint-action@main
      #   with:
      #     tflint-ver: ${{ vars.TF_LINT_VER }}
      #     use-cache: "true"
      #     tflint-format: "compact"

      # - name: Terraform Plan
      #   id: plan
      #   uses: subhamay-bhattacharyya-gha/tf-plan-action@main
      #   with:
      #     terraform-dir: "terraform-code" 
      #     # tf-vars-file: ${{ inputs.tf-vars-file }}
      #     s3-bucket: ${{ vars.TF_STATE_BUCKET_NAME }}
      #     s3-region: ${{ vars.AWS_REGION }}
      #     ci-pipeline: ${{ inputs.ci-pipeline }}

      # - name: Terraform Apply
      #   uses: subhamay-bhattacharyya-gha/tf-apply-action@main
      #   id: apply
      #   with:
      #     terraform-dir: "terraform-code"
      #     s3-bucket: ${{ vars.TF_STATE_BUCKET_NAME }}
      #     s3-region: ${{ vars.AWS_REGION }}
      #     ci-pipeline: "false"
                     
